const mongoose = require('mongoose');
    


    //TODO: Object validation 
    //Create squema
    const Schema = mongoose.Schema;



    //common schemas
    /**
     * User schema
     * Properties:
     * name : username of the user
     * roles: List of rol identifiers (str)
     */
    const User = new Schema({
        name: String,
        roles:[String]
    })




    ////------------ Main schemas -------------

   

    const Season = new Schema({
        startDate:{
            type: Date,
            required: true
        },
        endDate:{
            type: Date,
            required: true
        }
    })

    const Event = Schema({
        startDate:{
            type: Date,
            required: true
        },
        endDate:{
            type: Date,
            required: true
        },
        name:{
            type: String,
            required: true
        },
        type:{
            type: String,
            required: true
        }

    })

     //Statistics (stcs) object main schema
    //Properties:
    /**
     * name : name of the stcs object
     * author: object of the user that created the stcs
     * creationDate
     * description
     * season: season object to group all statistics
     * labels: list of strings ach label will be a string used to identify statistics of the same kind or subject, for grouping or filtering
     * type: type identifier of the stcs object. allowed types are: 
     * [simple_accumulated, comparative, temp_accumulated, temp_proportion, 
     * proportion, multiple_proportion, temp_interval, multiple_temp_interval]
     * value: lists of value objects. Each stcs type has its own value subschema
     */
    const Statistic = new Schema({
        
        name: {
            type: String,
            required: true
        }, // String is shorthand for {type: String}
        author: {
            type: String,
            required: true
        },
        type: {
            type: String,
            required: true
        },
        cretionDate: { type: Date, default: Date.now }, 
        description: {
            type: String,
            required: true
        },
        season:{
            type: Season
        },
        values: [{}],
        labels:[String], //each label will be a string used to identify statistics of the same kind or subject, for grouping or filtering
         event: Event   
        
    });


    //------------------ Subdocuments value schemas 

    //value main schema

    /**
     * Base value raw schema with common properties
     * @property endDate if null, value corresponds to a single moment
     * @property startDate required, if there is a start and a end date, the value corresponds to that time period
     */
    module.exports.Value = {
        startDate: {
            type: Date,
            required: true,
            default: new Date()
        },
        endDate: {type: Date, default: null},
        author: User

    }

    /**
     * simple_accumulated 
     * 
     */
    const Simple_accumulated = new Schema(() =>{
        let schema = {};
        Object.keys(module.exports.Value).map(function (key) {
            schema[key] = module.exports.Value[key];
        });
        schema.value = {type: Number, required: true};

        return schema
    });


    module.exports.User = mongoose.model("User", User)
    module.exports.Season = mongoose.model("Season", Season)
    module.exports.Event = mongoose.model("Event", Event)
    module.exports.Value_Simple_Accumulated = mongoose.model("Value_Simple_Accumulated", Simple_accumulated)

    module.exports.Statistic = mongoose.model("Statistic", Statistic);

    
